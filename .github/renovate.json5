{
  "extends": [
    "config:base", "helpers:pinGitHubActionDigests"
  ],
  "labels": ["dependencies"],
  "dependencyDashboard": true,
  "separateMinorPatch": true,
  "minor": {
    "enabled": true
  },
  "patch": {
    "enabled": true
  },
  "helm-values": {
    "fileMatch": ["(^|/).*?values.*?\\.yaml$"]
  },
  // GitHub Actions configuration
  "github-actions": {
    "enabled": true,
    "fileMatch": ["^\\.github/workflows/[^/]+\\.ya?ml$"]
  },
  "customDatasources": {
    "rosa-camunda": {
      "defaultRegistryUrlTemplate": "https://camunda.github.io/camunda-tf-rosa/rosa_versions.txt",
      "format": "plain",
    },
  },
  "packageRules": [
    //
    // Main groups.
    // This section should be updated with the Camunda supported versions.
    // Start of minor cycle chores.
    {
      "groupName": "camunda-platform-8.2",
      "addLabels": ["version/8.2", "deps/charts"],
      "matchFileNames": [
        "charts/camunda-platform-8.2/Chart.yaml",
        "charts/camunda-platform-8.2/values*.yaml",
        "charts/camunda-platform-8.2/go.*"
      ],
      "matchUpdateTypes": ["patch", "pin", "digest"],
    },
    {
      "groupName": "camunda-platform-8.3",
      "addLabels": ["version/8.3", "deps/charts"],
      "matchFileNames": [
        "charts/camunda-platform-8.3/Chart.yaml",
        "charts/camunda-platform-8.3/values*.yaml",
        "charts/camunda-platform-8.3/go.*"
      ],
      "matchUpdateTypes": ["patch", "pin", "digest"],
    },
    {
      "groupName": "camunda-platform-8.4",
      "addLabels": ["version/8.4", "deps/charts"],
      "matchFileNames": [
        "charts/camunda-platform-8.4/Chart.yaml",
        "charts/camunda-platform-8.4/values*.yaml",
        "charts/camunda-platform-8.4/go.*"
      ],
      "matchUpdateTypes": ["patch", "pin", "digest"],
    },
    {
      "groupName": "camunda-platform-8.5",
      "addLabels": ["version/8.5", "deps/charts"],
      "matchFileNames": [
        "charts/camunda-platform-8.5/Chart.yaml",
        "charts/camunda-platform-8.5/values*.yaml",
        "charts/camunda-platform-8.5/go.*"
      ],
      "matchUpdateTypes": ["patch", "pin", "digest"],
    },
    {
      "groupName": "camunda-platform-latest",
      "addLabels": ["version/8.6", "deps/charts"],
      "matchFileNames": [
        "charts/camunda-platform-latest/Chart.yaml",
        "charts/camunda-platform-latest/values*.yaml",
        "charts/camunda-platform-latest/go.*"
      ],
      "matchUpdateTypes": ["minor", "patch", "pin", "digest"],
    },
    {
      // Disable minor version update for Camunda components.
      "enabled": false,
      "matchPackageNames": ["/.*camunda.*/"],
      "matchFileNames": [
        "charts/camunda-platform-latest/values*.yaml",
      ],
      "matchUpdateTypes": ["minor"],
    },
    {
      "groupName": "camunda-platform-alpha",
      "addLabels": ["version/8.7", "deps/charts"],
      "matchFileNames": [
        "charts/camunda-platform-alpha/Chart.yaml",
        "charts/camunda-platform-alpha/values*.yaml",
        "charts/camunda-platform-alpha/go.*"
      ],
      "matchUpdateTypes": ["major", "minor", "patch"],
    },
    // End of minor cycle chores.

    //
    // Other groups.
    {
      "groupName": "bitnami-web-modeler-postgresql",
      "addLabels": ["deps/charts"],
      "matchFileNames": [
        "charts/web-modeler-postgresql/**",
      ],
      "matchUpdateTypes": ["minor", "patch"],
    },
    {
      "groupName": "tool-versions",
      "addLabels": ["deps/tools"],
      "matchFileNames": [".tool-versions"],
      "schedule": ["every weekend"],
    },
    {
      "groupName": "github-actions",
      "addLabels": ["deps/github-actions"],
      "matchManagers": ["github-actions"],
      "schedule": ["every weekend"],
    },

    //
    // Tools.
    {
      // Limit tools and libs versions to the actual Distro CI Kubernetes cluster.
      "matchDepPatterns": ["kubectl"],
      "allowedVersions": "<1.28.0"
    },
    {
      "matchDepPatterns": ["k8s.io/.*"],
      "allowedVersions": "<0.28.0"
    },
    // Some asdf plugins use the "v" prefix, so we extract the version without it.
    {
      "matchFileNames": [".tool-versions"],
      "matchPackageNames": [
        "gomplate",
      ],
      "extractVersion": "^v(?<version>.*)$",
    },

    //
    // Camunda charts.
    {
      // Disable major version update for all Helm components.
      "enabled": false,
      "matchManagers": ["helmv3", "helm-values", "regex"],
      "matchUpdateTypes": ["major"]
    },
    {
      // Enable patch version update for previous Camunda version.
      "matchDatasources": ["helmv3", "helm-values", "docker", "regex"],
      "matchPaths": [
        "charts/camunda-platform-8*/values.yaml",
        "charts/camunda-platform-8*/values-latest.yaml"
      ],
      "matchUpdateTypes": ["patch"]
    },
   {
      // Limit dependencies versions to latest supported version in Camunda maintenance charts.
      // https://docs.camunda.io/docs/reference/supported-environments/#camunda-8-self-managed
      "enabled": false,
      "matchDatasources": ["docker"],
      "matchPaths": [
        "charts/camunda-platform-8*/values.yaml",
        "charts/camunda-platform-8*/values-latest.yaml",
        "charts/camunda-platform-8*/Chart.yaml"
      ],
      "matchPackageNames": [
        "/.*elasticsearch.*/",
        "/.*keycloak.*/",
        "/.*postgresql.*/"
      ],
      "matchUpdateTypes": ["minor"]
    },
    {
      // Limit Elasticsearch version to latest supported version in Camunda latest chart.
      // https://docs.camunda.io/docs/reference/supported-environments/#camunda-8-self-managed
      "matchDatasources": ["docker"],
      "matchPaths": [
        "charts/camunda-platform-latest/values.yaml",
        "charts/camunda-platform-latest/values-latest.yaml"
      ],
      "matchPackageNames": ["/.*elasticsearch.*/"],
      "allowedVersions": "~8.12.0"
    },
    {
      // Limit Elasticsearch version to latest supported version in Camunda alpha chart.
      // https://docs.camunda.io/docs/reference/supported-environments/#camunda-8-self-managed
      "matchDatasources": ["docker"],
      "matchPaths": [
        "charts/camunda-platform-alpha/values.yaml",
        "charts/camunda-platform-alpha/values-latest.yaml"
      ],
      "matchPackageNames": ["/.*elasticsearch.*/"],
      "allowedVersions": "~8.15.0"
    },
    {
      // Limit alpha chart version to alpha tags only.
      "enabled": true,
      "matchDatasources": ["github-tags"],
      "matchPackageNames": ["camunda/camunda"],
      "matchFileNames": ["charts/camunda-platform-alpha/Chart.yaml"],
      "versioning": "regex:^(?<major>\\d+)(\.(?<minor>\\d+))(\.(?<patch>\\d+))(-(?<prerelease>alpha[1-6]))$"
    },
    {
      "enabled": true,
      "matchPackageNames": ["/.*camunda.*/"],
      "matchDatasources": ["helm", "docker", "regex"],
      "matchFileNames": [
        "charts/camunda-platform-alpha/Chart.yaml",
        "charts/camunda-platform-alpha/values*.yaml",
      ],
      // Ignore non-semver versions like 8.6.0-alpha3-rc3 which has a higher precedence than 8.6.0-alpha3
      // which is not the case.
      "versionCompatibility": "^(?<version>\\d+\.\\d+\.\\d+-alpha[1-6])(?<compatibility>.*)$",
      "versioning": "semver"
    },

    //
    // General.
    {
      "matchFileNames": [
        ".tool-versions",
        ".github/workflows/*",
        ".github/actions/*",
        "charts/**",
      ],
      "addLabels": ["automerge", "automation/renovatebot", "kind/chore"],
      // The platformAutomerge value should be false to avoid having the renovatebot PRs merged
      // without all checks passed.
      "platformAutomerge": false,
      "automerge": true
    }
  ],

  "regexManagers": [
    {
      // This is mainly used to Camunda alpha chart.
      "fileMatch": ["\\.yaml$"],
      "datasourceTemplate":"github-tags",
      "matchStrings": [
        "# renovate: datasource=github-tags depName=(?<depName>.+?)( versioning=(?<versioning>.+?))?(?: (lookupName|packageName)=(?<packageName>[^\\s]+?))?\\s+?version: (?<currentValue>\\S+)"
      ],
      "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}"
    },
    {
      // This is mainly used to update enterprise image tags like Console and Web-Modeler.
      // Console and Web-Modeler Self-Managed versions are different from SaaS versions,
      // hence, we use image tags from Camunda private registry as a source of truth for those components.
      // Another use case is Elasticsearch public Docker registry.
      "fileMatch": ["\\.yaml$"],
      "datasourceTemplate":"docker",
      "matchStrings": [
        "# renovate: datasource=docker depName=(?<depName>[^\\s]+?)(?: (lookupName|packageName)=(?<packageName>[^\\s]+?))?(?: versioning=(?<versioning>[^\\s]+?))?(?: registryUrl=(?<registryUrl>[^\\s]+?))?\\s*?(tag|imageTag): (?<currentValue>\\S+)"
      ],
      "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}"
    }
  ],

  "hostRules": [
    {
      "hostType": "docker",
      "matchHost": "https://registry.camunda.cloud",
      "username": "ci-distribution",
      "password": "{{ secrets.DISTRO_CAMUNDA_DOCKER_REGISTRY_PASSWORD }}"
    }
  ]
}
